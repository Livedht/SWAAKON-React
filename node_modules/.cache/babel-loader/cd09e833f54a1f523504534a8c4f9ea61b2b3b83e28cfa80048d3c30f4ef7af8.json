{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_KEY;\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error('Manglende Supabase miljøvariabler');\n}\nconsole.log('Initializing Supabase client with URL:', supabaseUrl);\nexport const supabase = createClient(supabaseUrl, supabaseKey, {\n  auth: {\n    persistSession: false\n  }\n});\n\n// Fetch all course data from original table\nexport const fetchAllCourses = async () => {\n  try {\n    console.log('Fetching all courses from Supabase');\n    const {\n      data,\n      error\n    } = await supabase.from('courses').select('*');\n    if (error) {\n      console.error('Supabase error:', error);\n      throw error;\n    }\n    console.log('Sample course data structure:', data[0]);\n    console.log(`Fetched ${data.length} courses`);\n    return data;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    throw error;\n  }\n};\n\n// Create new table for OpenAI embeddings\nexport const createOpenAIEmbeddingsTable = async () => {\n  try {\n    const {\n      error\n    } = await supabase.rpc('create_openai_embeddings_table');\n    if (error) {\n      console.error('Error creating table:', error);\n      throw error;\n    }\n    console.log('Successfully created openai_embeddings table');\n  } catch (error) {\n    console.error('Error in createOpenAIEmbeddingsTable:', error);\n    throw error;\n  }\n};\n\n// Store course with OpenAI embedding\nexport const storeCourseWithEmbedding = async (courseData, embedding) => {\n  try {\n    const {\n      error\n    } = await supabase.from('openai_embeddings').insert([{\n      kurskode: courseData.kurskode,\n      kursnavn: courseData.kursnavn,\n      credits: courseData.credits,\n      level_of_study: courseData.level_of_study,\n      academic_coordinator: courseData.academic_coordinator,\n      ansvarlig_institutt: courseData.ansvarlig_institutt,\n      ansvarlig_område: courseData.ansvarlig_område,\n      undv_språk: courseData.undv_språk,\n      portfolio: courseData.portfolio,\n      learning_outcome_knowledge: courseData.learning_outcome_knowledge,\n      learning_outcome_skills: courseData.learning_outcome_skills,\n      learning_outcome_general_competence: courseData.learning_outcome_general_competence,\n      course_content: courseData.course_content,\n      embedding: embedding\n    }]);\n    if (error) {\n      console.error('Error storing course with embedding:', error);\n      throw error;\n    }\n    console.log(`Successfully stored course ${courseData.kurskode} with OpenAI embedding`);\n  } catch (error) {\n    console.error(`Error storing course ${courseData.kurskode}:`, error);\n    throw error;\n  }\n};\n\n// Fetch courses with OpenAI embeddings\nexport const fetchOpenAIEmbeddings = async () => {\n  try {\n    console.log('Fetching courses with OpenAI embeddings');\n    const {\n      data,\n      error\n    } = await supabase.from('openai_embeddings').select('*');\n    if (error) {\n      console.error('Supabase error:', error);\n      throw error;\n    }\n    const processedCourses = data.map(course => ({\n      ...course,\n      embedding: typeof course.embedding === 'string' ? JSON.parse(course.embedding) : course.embedding\n    }));\n    console.log(`Fetched ${processedCourses.length} courses with OpenAI embeddings`);\n    return processedCourses;\n  } catch (error) {\n    console.error('Error fetching OpenAI embeddings:', error);\n    throw error;\n  }\n};\nexport const fetchStoredEmbeddings = async () => {\n  try {\n    console.log('Fetching stored embeddings from Supabase');\n    const {\n      data,\n      error\n    } = await supabase.from('openai_embeddings').select('*');\n    if (error) {\n      console.error('Supabase error:', {\n        message: error.message,\n        details: error.details,\n        hint: error.hint,\n        code: error.code\n      });\n      throw error;\n    }\n    console.log('Raw data from Supabase:', {\n      totalCourses: data.length,\n      sampleCourse: data[0] ? {\n        kurskode: data[0].kurskode,\n        embeddingType: typeof data[0].embedding,\n        hasEmbedding: Boolean(data[0].embedding)\n      } : 'No courses found'\n    });\n\n    // Process the embeddings\n    const processedCourses = data.map(course => {\n      // Handle the embedding field\n      let processedEmbedding;\n      if (course.embedding) {\n        if (Array.isArray(course.embedding)) {\n          processedEmbedding = course.embedding;\n          console.log(`Course ${course.kurskode}: Embedding is already an array of length ${course.embedding.length}`);\n        } else if (typeof course.embedding === 'string') {\n          try {\n            processedEmbedding = JSON.parse(course.embedding);\n            console.log(`Course ${course.kurskode}: Successfully parsed string embedding to array of length ${processedEmbedding.length}`);\n          } catch (e) {\n            console.error(`Error parsing embedding for course ${course.kurskode}:`, e);\n            return null;\n          }\n        } else {\n          console.error(`Unknown embedding format for course ${course.kurskode}:`, {\n            type: typeof course.embedding,\n            value: course.embedding\n          });\n          return null;\n        }\n      } else {\n        console.error(`No embedding found for course ${course.kurskode}`);\n        return null;\n      }\n\n      // Verify embedding is valid\n      if (!Array.isArray(processedEmbedding) || processedEmbedding.length !== 2000) {\n        console.error(`Invalid embedding for course ${course.kurskode}:`, {\n          isArray: Array.isArray(processedEmbedding),\n          length: processedEmbedding ? processedEmbedding.length : 0,\n          expectedLength: 2000\n        });\n        return null;\n      }\n      return {\n        ...course,\n        embedding: processedEmbedding\n      };\n    }).filter(course => course !== null);\n\n    // Log summary of processed courses\n    console.log('Embedding processing summary:', {\n      totalCoursesBeforeProcessing: data.length,\n      validCoursesAfterProcessing: processedCourses.length,\n      firstValidEmbedding: processedCourses[0] ? {\n        kurskode: processedCourses[0].kurskode,\n        embeddingLength: processedCourses[0].embedding.length,\n        firstFewValues: processedCourses[0].embedding.slice(0, 5)\n      } : 'No valid embeddings'\n    });\n    return processedCourses;\n  } catch (error) {\n    console.error('Detailed error in fetchStoredEmbeddings:', {\n      message: error.message,\n      stack: error.stack\n    });\n    throw error;\n  }\n};\nexport const updateCourseEmbedding = async (courseCode, embedding) => {\n  try {\n    console.log('Updating embedding for course:', courseCode);\n    const {\n      error\n    } = await supabase.from('courses').update({\n      embedding\n    }).eq('kurskode', courseCode);\n    if (error) {\n      console.error('Supabase error:', {\n        message: error.message,\n        details: error.details,\n        hint: error.hint,\n        code: error.code\n      });\n      throw error;\n    }\n    console.log('Successfully updated embedding');\n  } catch (error) {\n    console.error('Detailed error in updateCourseEmbedding:', {\n      message: error.message,\n      stack: error.stack\n    });\n    throw error;\n  }\n};\nexport const checkIsAdmin = async () => {\n  try {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) return false;\n    const {\n      data,\n      error\n    } = await supabase.from('user_roles').select('is_admin').eq('user_id', user.id).single();\n    if (error) throw error;\n    return (data === null || data === void 0 ? void 0 : data.is_admin) || false;\n  } catch (error) {\n    console.error('Error checking admin status:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_KEY","Error","console","log","supabase","auth","persistSession","fetchAllCourses","data","error","from","select","length","createOpenAIEmbeddingsTable","rpc","storeCourseWithEmbedding","courseData","embedding","insert","kurskode","kursnavn","credits","level_of_study","academic_coordinator","ansvarlig_institutt","ansvarlig_område","undv_språk","portfolio","learning_outcome_knowledge","learning_outcome_skills","learning_outcome_general_competence","course_content","fetchOpenAIEmbeddings","processedCourses","map","course","JSON","parse","fetchStoredEmbeddings","message","details","hint","code","totalCourses","sampleCourse","embeddingType","hasEmbedding","Boolean","processedEmbedding","Array","isArray","e","type","value","expectedLength","filter","totalCoursesBeforeProcessing","validCoursesAfterProcessing","firstValidEmbedding","embeddingLength","firstFewValues","slice","stack","updateCourseEmbedding","courseCode","update","eq","checkIsAdmin","user","getUser","id","single","is_admin"],"sources":["C:/Users/A1510207/OneDrive - BI Norwegian Business School (BIEDU)/Documents/Dev prosjekter/SWAAKON-React/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseKey = process.env.REACT_APP_SUPABASE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n    throw new Error('Manglende Supabase miljøvariabler');\r\n}\r\n\r\nconsole.log('Initializing Supabase client with URL:', supabaseUrl);\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey, {\r\n    auth: {\r\n        persistSession: false\r\n    }\r\n});\r\n\r\n// Fetch all course data from original table\r\nexport const fetchAllCourses = async () => {\r\n    try {\r\n        console.log('Fetching all courses from Supabase');\r\n        const { data, error } = await supabase\r\n            .from('courses')\r\n            .select('*');\r\n\r\n        if (error) {\r\n            console.error('Supabase error:', error);\r\n            throw error;\r\n        }\r\n\r\n        console.log('Sample course data structure:', data[0]);\r\n        console.log(`Fetched ${data.length} courses`);\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching courses:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Create new table for OpenAI embeddings\r\nexport const createOpenAIEmbeddingsTable = async () => {\r\n    try {\r\n        const { error } = await supabase\r\n            .rpc('create_openai_embeddings_table');\r\n\r\n        if (error) {\r\n            console.error('Error creating table:', error);\r\n            throw error;\r\n        }\r\n        console.log('Successfully created openai_embeddings table');\r\n    } catch (error) {\r\n        console.error('Error in createOpenAIEmbeddingsTable:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Store course with OpenAI embedding\r\nexport const storeCourseWithEmbedding = async (courseData, embedding) => {\r\n    try {\r\n        const { error } = await supabase\r\n            .from('openai_embeddings')\r\n            .insert([{\r\n                kurskode: courseData.kurskode,\r\n                kursnavn: courseData.kursnavn,\r\n                credits: courseData.credits,\r\n                level_of_study: courseData.level_of_study,\r\n                academic_coordinator: courseData.academic_coordinator,\r\n                ansvarlig_institutt: courseData.ansvarlig_institutt,\r\n                ansvarlig_område: courseData.ansvarlig_område,\r\n                undv_språk: courseData.undv_språk,\r\n                portfolio: courseData.portfolio,\r\n                learning_outcome_knowledge: courseData.learning_outcome_knowledge,\r\n                learning_outcome_skills: courseData.learning_outcome_skills,\r\n                learning_outcome_general_competence: courseData.learning_outcome_general_competence,\r\n                course_content: courseData.course_content,\r\n                embedding: embedding\r\n            }]);\r\n\r\n        if (error) {\r\n            console.error('Error storing course with embedding:', error);\r\n            throw error;\r\n        }\r\n        console.log(`Successfully stored course ${courseData.kurskode} with OpenAI embedding`);\r\n    } catch (error) {\r\n        console.error(`Error storing course ${courseData.kurskode}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch courses with OpenAI embeddings\r\nexport const fetchOpenAIEmbeddings = async () => {\r\n    try {\r\n        console.log('Fetching courses with OpenAI embeddings');\r\n        const { data, error } = await supabase\r\n            .from('openai_embeddings')\r\n            .select('*');\r\n\r\n        if (error) {\r\n            console.error('Supabase error:', error);\r\n            throw error;\r\n        }\r\n\r\n        const processedCourses = data.map(course => ({\r\n            ...course,\r\n            embedding: typeof course.embedding === 'string' ?\r\n                JSON.parse(course.embedding) : course.embedding\r\n        }));\r\n\r\n        console.log(`Fetched ${processedCourses.length} courses with OpenAI embeddings`);\r\n        return processedCourses;\r\n    } catch (error) {\r\n        console.error('Error fetching OpenAI embeddings:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const fetchStoredEmbeddings = async () => {\r\n    try {\r\n        console.log('Fetching stored embeddings from Supabase');\r\n        const { data, error } = await supabase\r\n            .from('openai_embeddings')\r\n            .select('*');\r\n\r\n        if (error) {\r\n            console.error('Supabase error:', {\r\n                message: error.message,\r\n                details: error.details,\r\n                hint: error.hint,\r\n                code: error.code\r\n            });\r\n            throw error;\r\n        }\r\n\r\n        console.log('Raw data from Supabase:', {\r\n            totalCourses: data.length,\r\n            sampleCourse: data[0] ? {\r\n                kurskode: data[0].kurskode,\r\n                embeddingType: typeof data[0].embedding,\r\n                hasEmbedding: Boolean(data[0].embedding)\r\n            } : 'No courses found'\r\n        });\r\n\r\n        // Process the embeddings\r\n        const processedCourses = data.map(course => {\r\n            // Handle the embedding field\r\n            let processedEmbedding;\r\n            if (course.embedding) {\r\n                if (Array.isArray(course.embedding)) {\r\n                    processedEmbedding = course.embedding;\r\n                    console.log(`Course ${course.kurskode}: Embedding is already an array of length ${course.embedding.length}`);\r\n                } else if (typeof course.embedding === 'string') {\r\n                    try {\r\n                        processedEmbedding = JSON.parse(course.embedding);\r\n                        console.log(`Course ${course.kurskode}: Successfully parsed string embedding to array of length ${processedEmbedding.length}`);\r\n                    } catch (e) {\r\n                        console.error(`Error parsing embedding for course ${course.kurskode}:`, e);\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    console.error(`Unknown embedding format for course ${course.kurskode}:`, {\r\n                        type: typeof course.embedding,\r\n                        value: course.embedding\r\n                    });\r\n                    return null;\r\n                }\r\n            } else {\r\n                console.error(`No embedding found for course ${course.kurskode}`);\r\n                return null;\r\n            }\r\n\r\n            // Verify embedding is valid\r\n            if (!Array.isArray(processedEmbedding) || processedEmbedding.length !== 2000) {\r\n                console.error(`Invalid embedding for course ${course.kurskode}:`, {\r\n                    isArray: Array.isArray(processedEmbedding),\r\n                    length: processedEmbedding ? processedEmbedding.length : 0,\r\n                    expectedLength: 2000\r\n                });\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                ...course,\r\n                embedding: processedEmbedding\r\n            };\r\n        }).filter(course => course !== null);\r\n\r\n        // Log summary of processed courses\r\n        console.log('Embedding processing summary:', {\r\n            totalCoursesBeforeProcessing: data.length,\r\n            validCoursesAfterProcessing: processedCourses.length,\r\n            firstValidEmbedding: processedCourses[0] ? {\r\n                kurskode: processedCourses[0].kurskode,\r\n                embeddingLength: processedCourses[0].embedding.length,\r\n                firstFewValues: processedCourses[0].embedding.slice(0, 5)\r\n            } : 'No valid embeddings'\r\n        });\r\n\r\n        return processedCourses;\r\n    } catch (error) {\r\n        console.error('Detailed error in fetchStoredEmbeddings:', {\r\n            message: error.message,\r\n            stack: error.stack\r\n        });\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateCourseEmbedding = async (courseCode, embedding) => {\r\n    try {\r\n        console.log('Updating embedding for course:', courseCode);\r\n        const { error } = await supabase\r\n            .from('courses')\r\n            .update({ embedding })\r\n            .eq('kurskode', courseCode);\r\n\r\n        if (error) {\r\n            console.error('Supabase error:', {\r\n                message: error.message,\r\n                details: error.details,\r\n                hint: error.hint,\r\n                code: error.code\r\n            });\r\n            throw error;\r\n        }\r\n\r\n        console.log('Successfully updated embedding');\r\n    } catch (error) {\r\n        console.error('Detailed error in updateCourseEmbedding:', {\r\n            message: error.message,\r\n            stack: error.stack\r\n        });\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const checkIsAdmin = async () => {\r\n    try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (!user) return false;\r\n\r\n        const { data, error } = await supabase\r\n            .from('user_roles')\r\n            .select('is_admin')\r\n            .eq('user_id', user.id)\r\n            .single();\r\n\r\n        if (error) throw error;\r\n        return data?.is_admin || false;\r\n    } catch (error) {\r\n        console.error('Error checking admin status:', error);\r\n        return false;\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}