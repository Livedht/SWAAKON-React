{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\n// Legg til disse konstantene øverst i filen\nconst COST_PER_1K_TOKENS = {\n  'gpt-4-turbo-preview': {\n    input: 0.01,\n    output: 0.03\n  },\n  'text-embedding-3-large': {\n    input: 0.00013,\n    output: 0.00013\n  }\n};\n\n// Funksjon for å logge API-kostnader\nconst logApiCost = async (endpoint, model, inputTokens, outputTokens = 0) => {\n  try {\n    const inputCost = inputTokens / 1000 * COST_PER_1K_TOKENS[model].input;\n    const outputCost = outputTokens / 1000 * COST_PER_1K_TOKENS[model].output;\n    const totalCost = inputCost + outputCost;\n    await supabase.from('api_costs').insert([{\n      endpoint,\n      model,\n      tokens_used: inputTokens + outputTokens,\n      cost_usd: totalCost\n    }]);\n  } catch (error) {\n    console.error('Error logging API cost:', error);\n  }\n};\n\n// Normalize the embedding vector to unit length\nconst normalizeVector = vector => {\n  const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));\n  return vector.map(val => val / magnitude);\n};\n\n// Clean and format text for validation\nconst cleanTextForValidation = text => {\n  // Remove bullet points and other special characters but keep the text\n  return text.replace(/[•·⋅‣⁃◦∙]/g, '') // Remove bullet points\n  .replace(/[\\n\\r]+/g, ' ') // Replace newlines with spaces\n  .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n  .trim();\n};\n\n// Validate text input\nconst isValidInput = text => {\n  // First, let's clean the text for validation\n  const cleanedText = cleanTextForValidation(text);\n\n  // Split into words, filtering out empty strings\n  const words = cleanedText.split(/\\s+/).filter(word => word.length > 0);\n  console.log('Validation stats:', {\n    originalLength: text.length,\n    cleanedLength: cleanedText.length,\n    wordCount: words.length,\n    sampleWords: words.slice(0, 5)\n  });\n\n  // Check word count\n  if (words.length < 10) {\n    console.log('Text too short, needs at least 10 words. Word count:', words.length);\n    return false;\n  }\n  if (words.length > 2000) {\n    console.log('Text too long, exceeds 2000 words');\n    return false;\n  }\n\n  // Check for meaningful content\n  const meaningfulWords = words.filter(word => word.length >= 2);\n  const meaningfulRatio = meaningfulWords.length / words.length;\n  if (meaningfulRatio < 0.5) {\n    console.log('Too many short or meaningless words. Meaningful ratio:', meaningfulRatio);\n    return false;\n  }\n\n  // Check character distribution\n  const letterCount = cleanedText.replace(/[^a-zA-ZæøåÆØÅ]/g, '').length;\n  const totalLength = cleanedText.length;\n  const letterRatio = letterCount / totalLength;\n  if (letterRatio < 0.3) {\n    // Reduced from 0.4 to 0.3 to accommodate more special characters\n    console.log('Too few letters in text. Letter ratio:', letterRatio);\n    return false;\n  }\n  return true;\n};\n\n// Cache for translations\nconst translationCache = new Map();\n\n// Simple hash function for text\nconst hashText = text => {\n  let hash = 0;\n  for (let i = 0; i < text.length; i++) {\n    const char = text.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash;\n  }\n  return hash;\n};\n\n// Function to detect if text is in English\nconst isEnglishText = text => {\n  // Check for absence of Norwegian characters\n  const hasNorwegianChars = /[æøåÆØÅ]/.test(text);\n  if (hasNorwegianChars) return false;\n\n  // Common English words that don't exist in Norwegian\n  const englishWords = /\\b(the|and|is|are|was|were|this|that|these|those|with|for)\\b/i;\n  return englishWords.test(text);\n};\n\n// Function to translate text between Norwegian and English\nconst translateText = async (text, targetLanguage) => {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4-turbo-preview\",\n      messages: [{\n        role: \"system\",\n        content: `You are a professional translator specializing in academic and technical content. \n                    Translate the following text to ${targetLanguage === 'en' ? 'English' : 'Norwegian (Bokmål)'}, \n                    maintaining academic terminology and professional tone. \n                    Keep the structure and formatting of the original text.\n                    For Norwegian translations, use modern Bokmål.`\n      }, {\n        role: \"user\",\n        content: text\n      }],\n      temperature: 0.3\n    });\n    return response.choices[0].message.content;\n  } catch (error) {\n    console.error('Translation error:', error);\n    throw error;\n  }\n};\n\n// Generate embedding for text\nexport const generateEmbedding = async (text, translateFirst = false) => {\n  try {\n    let norwegianText = text;\n    let englishText = text;\n    const isEnglish = isEnglishText(text);\n    console.log('Input text language detection:', {\n      isEnglish,\n      textSample: text.slice(0, 100) + '...'\n    });\n\n    // Handle translations if needed\n    if (isEnglish) {\n      // If text is English, translate to Norwegian\n      norwegianText = await translateText(text, 'nb');\n      console.log('Translated to Norwegian');\n    } else if (translateFirst) {\n      // If text is Norwegian and translation is requested, translate to English\n      englishText = await translateText(text, 'en');\n      console.log('Translated to English');\n    }\n\n    // Add context about the task\n    const contextualizeText = inputText => `Task: Compare academic course descriptions to find similarities in learning outcomes, content, and themes.\n\nCourse Information:\n${inputText}\n\nConsider:\n- Learning outcomes and competencies\n- Course content and themes\n- Academic level and complexity\n- Teaching methods and approach`;\n\n    // Generate embeddings for both language versions\n    const [norwegianEmbedding, englishEmbedding] = await Promise.all([openai.embeddings.create({\n      model: \"text-embedding-3-large\",\n      input: contextualizeText(norwegianText),\n      encoding_format: \"float\",\n      dimensions: 2000\n    }), openai.embeddings.create({\n      model: \"text-embedding-3-large\",\n      input: contextualizeText(englishText),\n      encoding_format: \"float\",\n      dimensions: 2000\n    })]);\n\n    // Logg kostnadene\n    await logApiCost('embeddings', 'text-embedding-3-large', norwegianEmbedding.usage.total_tokens);\n    await logApiCost('embeddings', 'text-embedding-3-large', englishEmbedding.usage.total_tokens);\n    console.log('Generated embeddings for both language versions:', {\n      norwegianLength: norwegianEmbedding.data[0].embedding.length,\n      englishLength: englishEmbedding.data[0].embedding.length\n    });\n\n    // Return both embeddings\n    return {\n      norwegian: norwegianEmbedding.data[0].embedding,\n      english: englishEmbedding.data[0].embedding,\n      isEnglishInput: isEnglish\n    };\n  } catch (error) {\n    console.error('Error generating embeddings:', error);\n    throw error;\n  }\n};\n\n// Legg til caching av analyseresultater\nconst analysisCache = new Map();\nexport const generateOverlapExplanation = async (courseA, courseB, similarityScore) => {\n  const cacheKey = `${courseA.name}-${courseB.kurskode}`;\n  if (analysisCache.has(cacheKey)) {\n    return analysisCache.get(cacheKey);\n  }\n  const isSameCourse = courseA.name === courseB.kursnavn || courseA.code && courseA.code === courseB.kurskode;\n  const prompt = `\nDu er en akademisk rådgiver som skal forklare overlapp mellom to kurs. \n${isSameCourse ? 'Dette er samme kurs som sammenlignes med seg selv.' : ''}\nGenerer en strukturert forklaring på norsk (maks 250 ord) som sammenligner disse kursene:\n\nKurs A: ${courseA.name}\n${courseA.content}\n${courseA.literature ? `Pensum: ${courseA.literature}` : ''}\n\nKurs B: ${courseB.kursnavn} (${courseB.kurskode})\n${courseB.description || courseB.course_content || 'Ingen beskrivelse tilgjengelig'}\n${courseB.pensum ? `Pensum: ${courseB.pensum}` : ''}\n\nSimilaritet: ${similarityScore}%\n\nFormater svaret slik, og bruk NØYAKTIG denne formateringen:\n\n### KURSSAMMENLIGNING\n▸ ${isSameCourse ? 'Dette er samme kurs sammenlignet med seg selv' : 'Kort introduksjon av begge kursene'}\n▸ Overordnet vurdering av overlapp (${similarityScore}% likhet)\n\n### HOVEDFOKUS\n• Sentrale temaer og konsepter${isSameCourse ? ' i kurset' : ' som overlapper'}\n${!isSameCourse ? `• Unike aspekter i ${courseA.name}\n• Unike aspekter i ${courseB.kursnavn}` : ''}\n\n### LÆRINGSUTBYTTE\n• Sentrale kompetanser${isSameCourse ? ' som kurset gir' : ' som overlapper'}:\n  - [Liste med kompetanser]\n${!isSameCourse ? `• Unike kompetanser i ${courseA.name}:\n  - [Liste med unike ferdigheter]\n• Unike kompetanser i ${courseB.kursnavn}:\n  - [Liste med unike ferdigheter]` : ''}\n\n${courseA.literature || courseB.pensum ? `### PENSUM\n• ${isSameCourse ? 'Kursets pensum og kilder' : 'Overlappende litteratur og kilder'}\n${!isSameCourse ? `• Unike kilder i ${courseA.name}\n• Unike kilder i ${courseB.kursnavn}` : ''}` : ''}\n\n### ANBEFALING\n▸ ${isSameCourse ? 'Dette er samme kurs, så det er ikke relevant å ta det flere ganger' : 'Er det hensiktsmessig å ta begge kursene?'}\n${!isSameCourse ? `▸ Anbefalt rekkefølge (hvis relevant)\n▸ Målgruppe og tilpasning` : ''}\n\nBruk kun punktlister (• og -) og piler (▸) som vist over.\nUnngå bruk av stjerner (**) eller annen formatering.\nHold teksten konsis og fokusert på praktisk informasjon.\n${isSameCourse ? 'Siden dette er samme kurs, fokuser på å beskrive kursets innhold og læringsutbytte, ikke på forskjeller.' : ''}`;\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4-turbo-preview\",\n      messages: [{\n        role: \"user\",\n        content: prompt\n      }],\n      temperature: 0.7,\n      max_tokens: 1000\n    });\n\n    // Logg kostnadene\n    await logApiCost('explanations', 'gpt-4-turbo-preview', response.usage.prompt_tokens, response.usage.completion_tokens);\n    const explanation = response.choices[0].message.content.trim();\n    console.log('Generated explanation:', explanation);\n    analysisCache.set(cacheKey, explanation);\n    return explanation;\n  } catch (error) {\n    console.error('Error generating overlap explanation:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","COST_PER_1K_TOKENS","input","output","logApiCost","endpoint","model","inputTokens","outputTokens","inputCost","outputCost","totalCost","supabase","from","insert","tokens_used","cost_usd","error","console","normalizeVector","vector","magnitude","Math","sqrt","reduce","sum","val","map","cleanTextForValidation","text","replace","trim","isValidInput","cleanedText","words","split","filter","word","length","log","originalLength","cleanedLength","wordCount","sampleWords","slice","meaningfulWords","meaningfulRatio","letterCount","totalLength","letterRatio","translationCache","Map","hashText","hash","i","char","charCodeAt","isEnglishText","hasNorwegianChars","test","englishWords","translateText","targetLanguage","response","chat","completions","create","messages","role","content","temperature","choices","message","generateEmbedding","translateFirst","norwegianText","englishText","isEnglish","textSample","contextualizeText","inputText","norwegianEmbedding","englishEmbedding","Promise","all","embeddings","encoding_format","dimensions","usage","total_tokens","norwegianLength","data","embedding","englishLength","norwegian","english","isEnglishInput","analysisCache","generateOverlapExplanation","courseA","courseB","similarityScore","cacheKey","name","kurskode","has","get","isSameCourse","kursnavn","code","prompt","literature","description","course_content","pensum","max_tokens","prompt_tokens","completion_tokens","explanation","set"],"sources":["C:/Users/A1510207/OneDrive - BI Norwegian Business School (BIEDU)/Documents/Dev prosjekter/SWAAKON-React/src/services/openai.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n});\n\n// Legg til disse konstantene øverst i filen\nconst COST_PER_1K_TOKENS = {\n    'gpt-4-turbo-preview': {\n        input: 0.01,\n        output: 0.03\n    },\n    'text-embedding-3-large': {\n        input: 0.00013,\n        output: 0.00013\n    }\n};\n\n// Funksjon for å logge API-kostnader\nconst logApiCost = async (endpoint, model, inputTokens, outputTokens = 0) => {\n    try {\n        const inputCost = (inputTokens / 1000) * COST_PER_1K_TOKENS[model].input;\n        const outputCost = (outputTokens / 1000) * COST_PER_1K_TOKENS[model].output;\n        const totalCost = inputCost + outputCost;\n        \n        await supabase.from('api_costs').insert([{\n            endpoint,\n            model,\n            tokens_used: inputTokens + outputTokens,\n            cost_usd: totalCost\n        }]);\n    } catch (error) {\n        console.error('Error logging API cost:', error);\n    }\n};\n\n// Normalize the embedding vector to unit length\nconst normalizeVector = (vector) => {\n    const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));\n    return vector.map(val => val / magnitude);\n};\n\n// Clean and format text for validation\nconst cleanTextForValidation = (text) => {\n    // Remove bullet points and other special characters but keep the text\n    return text\n        .replace(/[•·⋅‣⁃◦∙]/g, '') // Remove bullet points\n        .replace(/[\\n\\r]+/g, ' ') // Replace newlines with spaces\n        .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n        .trim();\n};\n\n// Validate text input\nconst isValidInput = (text) => {\n    // First, let's clean the text for validation\n    const cleanedText = cleanTextForValidation(text);\n\n    // Split into words, filtering out empty strings\n    const words = cleanedText.split(/\\s+/).filter(word => word.length > 0);\n\n    console.log('Validation stats:', {\n        originalLength: text.length,\n        cleanedLength: cleanedText.length,\n        wordCount: words.length,\n        sampleWords: words.slice(0, 5)\n    });\n\n    // Check word count\n    if (words.length < 10) {\n        console.log('Text too short, needs at least 10 words. Word count:', words.length);\n        return false;\n    }\n\n    if (words.length > 2000) {\n        console.log('Text too long, exceeds 2000 words');\n        return false;\n    }\n\n    // Check for meaningful content\n    const meaningfulWords = words.filter(word => word.length >= 2);\n    const meaningfulRatio = meaningfulWords.length / words.length;\n\n    if (meaningfulRatio < 0.5) {\n        console.log('Too many short or meaningless words. Meaningful ratio:', meaningfulRatio);\n        return false;\n    }\n\n    // Check character distribution\n    const letterCount = cleanedText.replace(/[^a-zA-ZæøåÆØÅ]/g, '').length;\n    const totalLength = cleanedText.length;\n    const letterRatio = letterCount / totalLength;\n\n    if (letterRatio < 0.3) {  // Reduced from 0.4 to 0.3 to accommodate more special characters\n        console.log('Too few letters in text. Letter ratio:', letterRatio);\n        return false;\n    }\n\n    return true;\n};\n\n// Cache for translations\nconst translationCache = new Map();\n\n// Simple hash function for text\nconst hashText = (text) => {\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n        const char = text.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash;\n    }\n    return hash;\n};\n\n// Function to detect if text is in English\nconst isEnglishText = (text) => {\n    // Check for absence of Norwegian characters\n    const hasNorwegianChars = /[æøåÆØÅ]/.test(text);\n    if (hasNorwegianChars) return false;\n\n    // Common English words that don't exist in Norwegian\n    const englishWords = /\\b(the|and|is|are|was|were|this|that|these|those|with|for)\\b/i;\n    return englishWords.test(text);\n};\n\n// Function to translate text between Norwegian and English\nconst translateText = async (text, targetLanguage) => {\n    try {\n        const response = await openai.chat.completions.create({\n            model: \"gpt-4-turbo-preview\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are a professional translator specializing in academic and technical content. \n                    Translate the following text to ${targetLanguage === 'en' ? 'English' : 'Norwegian (Bokmål)'}, \n                    maintaining academic terminology and professional tone. \n                    Keep the structure and formatting of the original text.\n                    For Norwegian translations, use modern Bokmål.`\n                },\n                {\n                    role: \"user\",\n                    content: text\n                }\n            ],\n            temperature: 0.3\n        });\n\n        return response.choices[0].message.content;\n    } catch (error) {\n        console.error('Translation error:', error);\n        throw error;\n    }\n};\n\n// Generate embedding for text\nexport const generateEmbedding = async (text, translateFirst = false) => {\n    try {\n        let norwegianText = text;\n        let englishText = text;\n        const isEnglish = isEnglishText(text);\n\n        console.log('Input text language detection:', {\n            isEnglish,\n            textSample: text.slice(0, 100) + '...'\n        });\n\n        // Handle translations if needed\n        if (isEnglish) {\n            // If text is English, translate to Norwegian\n            norwegianText = await translateText(text, 'nb');\n            console.log('Translated to Norwegian');\n        } else if (translateFirst) {\n            // If text is Norwegian and translation is requested, translate to English\n            englishText = await translateText(text, 'en');\n            console.log('Translated to English');\n        }\n\n        // Add context about the task\n        const contextualizeText = (inputText) => `Task: Compare academic course descriptions to find similarities in learning outcomes, content, and themes.\n\nCourse Information:\n${inputText}\n\nConsider:\n- Learning outcomes and competencies\n- Course content and themes\n- Academic level and complexity\n- Teaching methods and approach`;\n\n        // Generate embeddings for both language versions\n        const [norwegianEmbedding, englishEmbedding] = await Promise.all([\n            openai.embeddings.create({\n                model: \"text-embedding-3-large\",\n                input: contextualizeText(norwegianText),\n                encoding_format: \"float\",\n                dimensions: 2000\n            }),\n            openai.embeddings.create({\n                model: \"text-embedding-3-large\",\n                input: contextualizeText(englishText),\n                encoding_format: \"float\",\n                dimensions: 2000\n            })\n        ]);\n\n        // Logg kostnadene\n        await logApiCost(\n            'embeddings',\n            'text-embedding-3-large',\n            norwegianEmbedding.usage.total_tokens\n        );\n        await logApiCost(\n            'embeddings',\n            'text-embedding-3-large',\n            englishEmbedding.usage.total_tokens\n        );\n\n        console.log('Generated embeddings for both language versions:', {\n            norwegianLength: norwegianEmbedding.data[0].embedding.length,\n            englishLength: englishEmbedding.data[0].embedding.length\n        });\n\n        // Return both embeddings\n        return {\n            norwegian: norwegianEmbedding.data[0].embedding,\n            english: englishEmbedding.data[0].embedding,\n            isEnglishInput: isEnglish\n        };\n    } catch (error) {\n        console.error('Error generating embeddings:', error);\n        throw error;\n    }\n};\n\n// Legg til caching av analyseresultater\nconst analysisCache = new Map();\n\nexport const generateOverlapExplanation = async (courseA, courseB, similarityScore) => {\n    const cacheKey = `${courseA.name}-${courseB.kurskode}`;\n    \n    if (analysisCache.has(cacheKey)) {\n        return analysisCache.get(cacheKey);\n    }\n    \n    const isSameCourse = courseA.name === courseB.kursnavn ||\n        (courseA.code && courseA.code === courseB.kurskode);\n\n    const prompt = `\nDu er en akademisk rådgiver som skal forklare overlapp mellom to kurs. \n${isSameCourse ? 'Dette er samme kurs som sammenlignes med seg selv.' : ''}\nGenerer en strukturert forklaring på norsk (maks 250 ord) som sammenligner disse kursene:\n\nKurs A: ${courseA.name}\n${courseA.content}\n${courseA.literature ? `Pensum: ${courseA.literature}` : ''}\n\nKurs B: ${courseB.kursnavn} (${courseB.kurskode})\n${courseB.description || courseB.course_content || 'Ingen beskrivelse tilgjengelig'}\n${courseB.pensum ? `Pensum: ${courseB.pensum}` : ''}\n\nSimilaritet: ${similarityScore}%\n\nFormater svaret slik, og bruk NØYAKTIG denne formateringen:\n\n### KURSSAMMENLIGNING\n▸ ${isSameCourse ? 'Dette er samme kurs sammenlignet med seg selv' : 'Kort introduksjon av begge kursene'}\n▸ Overordnet vurdering av overlapp (${similarityScore}% likhet)\n\n### HOVEDFOKUS\n• Sentrale temaer og konsepter${isSameCourse ? ' i kurset' : ' som overlapper'}\n${!isSameCourse ? `• Unike aspekter i ${courseA.name}\n• Unike aspekter i ${courseB.kursnavn}` : ''}\n\n### LÆRINGSUTBYTTE\n• Sentrale kompetanser${isSameCourse ? ' som kurset gir' : ' som overlapper'}:\n  - [Liste med kompetanser]\n${!isSameCourse ? `• Unike kompetanser i ${courseA.name}:\n  - [Liste med unike ferdigheter]\n• Unike kompetanser i ${courseB.kursnavn}:\n  - [Liste med unike ferdigheter]` : ''}\n\n${courseA.literature || courseB.pensum ? `### PENSUM\n• ${isSameCourse ? 'Kursets pensum og kilder' : 'Overlappende litteratur og kilder'}\n${!isSameCourse ? `• Unike kilder i ${courseA.name}\n• Unike kilder i ${courseB.kursnavn}` : ''}` : ''}\n\n### ANBEFALING\n▸ ${isSameCourse ? 'Dette er samme kurs, så det er ikke relevant å ta det flere ganger' : 'Er det hensiktsmessig å ta begge kursene?'}\n${!isSameCourse ? `▸ Anbefalt rekkefølge (hvis relevant)\n▸ Målgruppe og tilpasning` : ''}\n\nBruk kun punktlister (• og -) og piler (▸) som vist over.\nUnngå bruk av stjerner (**) eller annen formatering.\nHold teksten konsis og fokusert på praktisk informasjon.\n${isSameCourse ? 'Siden dette er samme kurs, fokuser på å beskrive kursets innhold og læringsutbytte, ikke på forskjeller.' : ''}`;\n\n    try {\n        const response = await openai.chat.completions.create({\n            model: \"gpt-4-turbo-preview\",\n            messages: [{ role: \"user\", content: prompt }],\n            temperature: 0.7,\n            max_tokens: 1000\n        });\n\n        // Logg kostnadene\n        await logApiCost(\n            'explanations',\n            'gpt-4-turbo-preview',\n            response.usage.prompt_tokens,\n            response.usage.completion_tokens\n        );\n\n        const explanation = response.choices[0].message.content.trim();\n        console.log('Generated explanation:', explanation);\n        \n        analysisCache.set(cacheKey, explanation);\n        return explanation;\n    } catch (error) {\n        console.error('Error generating overlap explanation:', error);\n        throw error;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}