{"ast":null,"code":"// Utility function to calculate cosine similarity between two vectors\nexport const cosineSimilarity = (vecA, vecB) => {\n  try {\n    if (!Array.isArray(vecA) || !Array.isArray(vecB)) {\n      console.error('Invalid vectors:', {\n        vecA,\n        vecB\n      });\n      throw new Error('Invalid vectors provided to cosineSimilarity');\n    }\n\n    // Log first few values of each vector for debugging\n    console.log('Vector samples:', {\n      vecA: vecA.slice(0, 5),\n      vecB: vecB.slice(0, 5)\n    });\n    const dotProduct = vecA.reduce((sum, a, i) => sum + a * vecB[i], 0);\n    const magnitudeA = Math.sqrt(vecA.reduce((sum, a) => sum + a * a, 0));\n    const magnitudeB = Math.sqrt(vecB.reduce((sum, b) => sum + b * b, 0));\n    console.log('Vector magnitudes:', {\n      magnitudeA,\n      magnitudeB,\n      dotProduct\n    });\n    if (magnitudeA === 0 || magnitudeB === 0) {\n      console.error('Zero magnitude vector detected:', {\n        magnitudeA,\n        magnitudeB\n      });\n      return 0;\n    }\n    const similarity = dotProduct / (magnitudeA * magnitudeB);\n    console.log('Raw cosine similarity:', similarity);\n\n    // Ensure similarity is within [-1, 1] range\n    if (similarity < -1.0001 || similarity > 1.0001) {\n      console.error('Invalid similarity value:', similarity);\n      return 0;\n    }\n\n    // Clamp similarity to [-1, 1] range\n    const clampedSimilarity = Math.max(-1, Math.min(1, similarity));\n\n    // Convert from [-1,1] to [0,1] range\n    const normalizedSimilarity = (clampedSimilarity + 1) / 2;\n    console.log('Normalized similarity [0,1]:', normalizedSimilarity);\n\n    // Apply a more aggressive scaling to differentiate similarities:\n    // - Below 0.6 will result in very low scores\n    // - 0.6-0.8 will give moderate scores\n    // - Only very similar content (>0.8) will give high scores\n    const scaledSimilarity = Math.pow(normalizedSimilarity, 2) * 100;\n\n    // Apply additional scaling to spread out the scores\n    let finalScore;\n    if (scaledSimilarity < 40) {\n      finalScore = scaledSimilarity * 0.5; // Reduce low similarities\n    } else if (scaledSimilarity < 70) {\n      finalScore = 20 + (scaledSimilarity - 40) * 0.8; // Moderate scaling\n    } else {\n      finalScore = 44 + (scaledSimilarity - 70) * 1.5; // Higher scaling for high similarities\n    }\n    console.log('Similarity calculation:', {\n      rawSimilarity: similarity,\n      normalizedSimilarity,\n      scaledSimilarity,\n      finalScore\n    });\n    return Math.round(Math.min(finalScore, 100) * 10) / 10; // Round to 1 decimal\n  } catch (error) {\n    console.error('Error in cosineSimilarity calculation:', error);\n    return 0;\n  }\n};\n\n// Calculate cosine similarity between two vectors\nconst calculateCosineSimilarity = (vectorA, vectorB) => {\n  try {\n    if (vectorA.length !== vectorB.length) {\n      console.error('Embedding length mismatch:', {\n        targetLength: vectorA.length,\n        courseLength: vectorB.length\n      });\n      throw new Error('Vector dimensions do not match');\n    }\n    console.log('=== Starting similarity calculation ===');\n    console.log('Vector A first 5 values:', vectorA.slice(0, 5));\n    console.log('Vector B first 5 values:', vectorB.slice(0, 5));\n\n    // Check if vectors are identical\n    const areIdentical = vectorA.every((val, i) => Math.abs(val - vectorB[i]) < 0.000001);\n    if (areIdentical) {\n      console.log('Vectors are identical!');\n      return 1;\n    }\n    const dotProduct = vectorA.reduce((sum, a, i) => sum + a * vectorB[i], 0);\n    const magnitudeA = Math.sqrt(vectorA.reduce((sum, a) => sum + a * a, 0));\n    const magnitudeB = Math.sqrt(vectorB.reduce((sum, b) => sum + b * b, 0));\n    console.log('Vector properties:', {\n      magnitudeA,\n      magnitudeB,\n      dotProduct,\n      shouldBeNearOne: magnitudeA.toFixed(6),\n      shouldAlsoBeNearOne: magnitudeB.toFixed(6)\n    });\n    if (magnitudeA === 0 || magnitudeB === 0) {\n      console.error('Zero magnitude vector detected:', {\n        magnitudeA,\n        magnitudeB\n      });\n      return 0;\n    }\n    const similarity = dotProduct / (magnitudeA * magnitudeB);\n    console.log('Raw similarity score:', similarity);\n    console.log('=== Similarity calculation complete ===');\n    return Math.max(-1, Math.min(1, similarity));\n  } catch (error) {\n    console.error('Error calculating similarity:', error);\n    throw error;\n  }\n};\n\n// Calculate final similarity score\nexport const calculateCourseSimilarity = (targetEmbedding, courseEmbedding, targetLanguage, courseLanguage) => {\n  try {\n    // Log dimensions before calculation\n    console.log('Embedding dimensions:', {\n      target: targetEmbedding.length,\n      course: courseEmbedding.length,\n      targetSample: targetEmbedding.slice(0, 5),\n      courseSample: courseEmbedding.slice(0, 5)\n    });\n    if (!Array.isArray(targetEmbedding) || !Array.isArray(courseEmbedding)) {\n      console.error('Invalid embeddings:', {\n        targetIsArray: Array.isArray(targetEmbedding),\n        courseIsArray: Array.isArray(courseEmbedding)\n      });\n      return 0;\n    }\n    if (targetEmbedding.length !== courseEmbedding.length) {\n      console.error('Embedding dimension mismatch:', {\n        targetLength: targetEmbedding.length,\n        courseLength: courseEmbedding.length\n      });\n      return 0;\n    }\n    const rawSimilarity = calculateCosineSimilarity(targetEmbedding, courseEmbedding);\n\n    // Convert from [-1, 1] to [0, 1]\n    const normalizedSimilarity = (rawSimilarity + 1) / 2;\n\n    // Apply a language boost if comparing across languages\n    const isLanguageDifferent = targetLanguage && courseLanguage && targetLanguage !== courseLanguage;\n    const languageBoost = isLanguageDifferent ? 0.35 : 0; // 35% boost for cross-language matches\n\n    // First calculate base similarity score\n    let baseScore;\n    if (rawSimilarity > 0.96) {\n      // Nearly identical\n      baseScore = 90 + (rawSimilarity - 0.96) * 250; // Maps 0.96-1.0 to 90-100\n    } else if (rawSimilarity > 0.92) {\n      // Very similar\n      baseScore = 70 + (rawSimilarity - 0.92) * 500; // Maps 0.92-0.96 to 70-90\n    } else if (rawSimilarity > 0.85) {\n      // Moderately similar\n      baseScore = 40 + (rawSimilarity - 0.85) * 428.57; // Maps 0.85-0.92 to 40-70\n    } else {\n      // Less similar\n      baseScore = rawSimilarity * 47.06; // Maps 0-0.85 to 0-40\n    }\n\n    // Apply language boost and additional scaling for cross-language matches\n    let finalScore;\n    if (isLanguageDifferent && rawSimilarity > 0.8) {\n      // For high-similarity cross-language matches, apply a more aggressive boost\n      finalScore = baseScore * (1 + languageBoost) * 1.2;\n    } else {\n      finalScore = baseScore * (1 + languageBoost);\n    }\n\n    // Ensure final score doesn't exceed 100\n    finalScore = Math.min(100, finalScore);\n    console.log('Similarity calculation:', {\n      rawSimilarity,\n      normalizedSimilarity,\n      isLanguageDifferent,\n      languageBoost,\n      baseScore,\n      finalScore\n    });\n    return Math.round(Math.min(finalScore, 100) * 10) / 10;\n  } catch (error) {\n    console.error('Error in calculateCourseSimilarity:', error);\n    return 0;\n  }\n};\n\n// Find similar courses from a list\nexport const findSimilarCourses = async (newCourseEmbedding, storedCourses) => {\n  console.log(`Processing ${storedCourses.length} courses for similarity`);\n  try {\n    // Log the first few stored courses to verify data\n    console.log('Sample of stored courses:', storedCourses.slice(0, 3).map(c => ({\n      kurskode: c.kurskode,\n      kursnavn: c.kursnavn,\n      hasEmbedding: Boolean(c.embedding),\n      embeddingLength: c.embedding ? c.embedding.length : 0,\n      language: c.undv_språk || 'nb' // Default to Norwegian if not specified\n    })));\n    const similarities = storedCourses.map(course => {\n      var _course$kurskode;\n      if (!course.embedding || !Array.isArray(course.embedding)) {\n        console.log(`Missing or invalid embedding for course: ${course.kurskode}`);\n        return null;\n      }\n      console.log(`\\nProcessing course: ${course.kurskode} - ${course.kursnavn}`);\n      console.log('Course language:', course.undv_språk || 'nb');\n\n      // Determine course language\n      const courseLanguage = course.undv_språk || 'nb'; // Default to Norwegian\n      const targetLanguage = (_course$kurskode = course.kurskode) !== null && _course$kurskode !== void 0 && _course$kurskode.startsWith('EXC') ? 'en' : 'nb'; // Assume EXC courses are in English\n\n      // Calculate similarity with language information\n      const similarity = calculateCourseSimilarity(newCourseEmbedding, course.embedding, targetLanguage, courseLanguage);\n\n      // Log similarity with language information\n      console.log('Similarity calculation result:', {\n        kurskode: course.kurskode,\n        kursnavn: course.kursnavn,\n        targetLanguage,\n        courseLanguage,\n        similarity\n      });\n      return {\n        ...course,\n        similarity\n      };\n    }).filter(course => course !== null).filter(course => {\n      const passed = course.similarity >= 40;\n      if (!passed) {\n        console.log(`Course ${course.kurskode} filtered out with similarity ${course.similarity}%`);\n      }\n      return passed;\n    }).sort((a, b) => b.similarity - a.similarity);\n\n    // Log similarity distribution\n    const allSimilarities = similarities.map(c => c.similarity).sort((a, b) => b - a);\n    console.log('\\nSimilarity distribution:', {\n      max: Math.max(...allSimilarities),\n      min: Math.min(...allSimilarities),\n      average: allSimilarities.reduce((a, b) => a + b, 0) / allSimilarities.length,\n      count: allSimilarities.length,\n      top10: allSimilarities.slice(0, 10)\n    });\n    return similarities;\n  } catch (error) {\n    console.error('Error in findSimilarCourses:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["cosineSimilarity","vecA","vecB","Array","isArray","console","error","Error","log","slice","dotProduct","reduce","sum","a","i","magnitudeA","Math","sqrt","magnitudeB","b","similarity","clampedSimilarity","max","min","normalizedSimilarity","scaledSimilarity","pow","finalScore","rawSimilarity","round","calculateCosineSimilarity","vectorA","vectorB","length","targetLength","courseLength","areIdentical","every","val","abs","shouldBeNearOne","toFixed","shouldAlsoBeNearOne","calculateCourseSimilarity","targetEmbedding","courseEmbedding","targetLanguage","courseLanguage","target","course","targetSample","courseSample","targetIsArray","courseIsArray","isLanguageDifferent","languageBoost","baseScore","findSimilarCourses","newCourseEmbedding","storedCourses","map","c","kurskode","kursnavn","hasEmbedding","Boolean","embedding","embeddingLength","language","undv_språk","similarities","_course$kurskode","startsWith","filter","passed","sort","allSimilarities","average","count","top10"],"sources":["C:/Users/A1510207/OneDrive - BI Norwegian Business School (BIEDU)/Documents/Dev prosjekter/SWAAKON-React/src/services/similarity.js"],"sourcesContent":["// Utility function to calculate cosine similarity between two vectors\r\nexport const cosineSimilarity = (vecA, vecB) => {\r\n    try {\r\n        if (!Array.isArray(vecA) || !Array.isArray(vecB)) {\r\n            console.error('Invalid vectors:', { vecA, vecB });\r\n            throw new Error('Invalid vectors provided to cosineSimilarity');\r\n        }\r\n\r\n        // Log first few values of each vector for debugging\r\n        console.log('Vector samples:', {\r\n            vecA: vecA.slice(0, 5),\r\n            vecB: vecB.slice(0, 5)\r\n        });\r\n\r\n        const dotProduct = vecA.reduce((sum, a, i) => sum + a * vecB[i], 0);\r\n        const magnitudeA = Math.sqrt(vecA.reduce((sum, a) => sum + a * a, 0));\r\n        const magnitudeB = Math.sqrt(vecB.reduce((sum, b) => sum + b * b, 0));\r\n\r\n        console.log('Vector magnitudes:', { magnitudeA, magnitudeB, dotProduct });\r\n\r\n        if (magnitudeA === 0 || magnitudeB === 0) {\r\n            console.error('Zero magnitude vector detected:', { magnitudeA, magnitudeB });\r\n            return 0;\r\n        }\r\n\r\n        const similarity = dotProduct / (magnitudeA * magnitudeB);\r\n        console.log('Raw cosine similarity:', similarity);\r\n\r\n        // Ensure similarity is within [-1, 1] range\r\n        if (similarity < -1.0001 || similarity > 1.0001) {\r\n            console.error('Invalid similarity value:', similarity);\r\n            return 0;\r\n        }\r\n\r\n        // Clamp similarity to [-1, 1] range\r\n        const clampedSimilarity = Math.max(-1, Math.min(1, similarity));\r\n\r\n        // Convert from [-1,1] to [0,1] range\r\n        const normalizedSimilarity = (clampedSimilarity + 1) / 2;\r\n        console.log('Normalized similarity [0,1]:', normalizedSimilarity);\r\n\r\n        // Apply a more aggressive scaling to differentiate similarities:\r\n        // - Below 0.6 will result in very low scores\r\n        // - 0.6-0.8 will give moderate scores\r\n        // - Only very similar content (>0.8) will give high scores\r\n        const scaledSimilarity = Math.pow(normalizedSimilarity, 2) * 100;\r\n\r\n        // Apply additional scaling to spread out the scores\r\n        let finalScore;\r\n        if (scaledSimilarity < 40) {\r\n            finalScore = scaledSimilarity * 0.5; // Reduce low similarities\r\n        } else if (scaledSimilarity < 70) {\r\n            finalScore = 20 + (scaledSimilarity - 40) * 0.8; // Moderate scaling\r\n        } else {\r\n            finalScore = 44 + (scaledSimilarity - 70) * 1.5; // Higher scaling for high similarities\r\n        }\r\n\r\n        console.log('Similarity calculation:', {\r\n            rawSimilarity: similarity,\r\n            normalizedSimilarity,\r\n            scaledSimilarity,\r\n            finalScore\r\n        });\r\n\r\n        return Math.round(Math.min(finalScore, 100) * 10) / 10; // Round to 1 decimal\r\n    } catch (error) {\r\n        console.error('Error in cosineSimilarity calculation:', error);\r\n        return 0;\r\n    }\r\n};\r\n\r\n// Calculate cosine similarity between two vectors\r\nconst calculateCosineSimilarity = (vectorA, vectorB) => {\r\n    try {\r\n        if (vectorA.length !== vectorB.length) {\r\n            console.error('Embedding length mismatch:', { targetLength: vectorA.length, courseLength: vectorB.length });\r\n            throw new Error('Vector dimensions do not match');\r\n        }\r\n\r\n        console.log('=== Starting similarity calculation ===');\r\n        console.log('Vector A first 5 values:', vectorA.slice(0, 5));\r\n        console.log('Vector B first 5 values:', vectorB.slice(0, 5));\r\n\r\n        // Check if vectors are identical\r\n        const areIdentical = vectorA.every((val, i) => Math.abs(val - vectorB[i]) < 0.000001);\r\n        if (areIdentical) {\r\n            console.log('Vectors are identical!');\r\n            return 1;\r\n        }\r\n\r\n        const dotProduct = vectorA.reduce((sum, a, i) => sum + a * vectorB[i], 0);\r\n        const magnitudeA = Math.sqrt(vectorA.reduce((sum, a) => sum + a * a, 0));\r\n        const magnitudeB = Math.sqrt(vectorB.reduce((sum, b) => sum + b * b, 0));\r\n\r\n        console.log('Vector properties:', {\r\n            magnitudeA,\r\n            magnitudeB,\r\n            dotProduct,\r\n            shouldBeNearOne: magnitudeA.toFixed(6),\r\n            shouldAlsoBeNearOne: magnitudeB.toFixed(6)\r\n        });\r\n\r\n        if (magnitudeA === 0 || magnitudeB === 0) {\r\n            console.error('Zero magnitude vector detected:', { magnitudeA, magnitudeB });\r\n            return 0;\r\n        }\r\n\r\n        const similarity = dotProduct / (magnitudeA * magnitudeB);\r\n        console.log('Raw similarity score:', similarity);\r\n        console.log('=== Similarity calculation complete ===');\r\n\r\n        return Math.max(-1, Math.min(1, similarity));\r\n    } catch (error) {\r\n        console.error('Error calculating similarity:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Calculate final similarity score\r\nexport const calculateCourseSimilarity = (targetEmbedding, courseEmbedding, targetLanguage, courseLanguage) => {\r\n    try {\r\n        // Log dimensions before calculation\r\n        console.log('Embedding dimensions:', {\r\n            target: targetEmbedding.length,\r\n            course: courseEmbedding.length,\r\n            targetSample: targetEmbedding.slice(0, 5),\r\n            courseSample: courseEmbedding.slice(0, 5)\r\n        });\r\n\r\n        if (!Array.isArray(targetEmbedding) || !Array.isArray(courseEmbedding)) {\r\n            console.error('Invalid embeddings:', {\r\n                targetIsArray: Array.isArray(targetEmbedding),\r\n                courseIsArray: Array.isArray(courseEmbedding)\r\n            });\r\n            return 0;\r\n        }\r\n\r\n        if (targetEmbedding.length !== courseEmbedding.length) {\r\n            console.error('Embedding dimension mismatch:', {\r\n                targetLength: targetEmbedding.length,\r\n                courseLength: courseEmbedding.length\r\n            });\r\n            return 0;\r\n        }\r\n\r\n        const rawSimilarity = calculateCosineSimilarity(targetEmbedding, courseEmbedding);\r\n\r\n        // Convert from [-1, 1] to [0, 1]\r\n        const normalizedSimilarity = (rawSimilarity + 1) / 2;\r\n\r\n        // Apply a language boost if comparing across languages\r\n        const isLanguageDifferent = targetLanguage && courseLanguage && targetLanguage !== courseLanguage;\r\n        const languageBoost = isLanguageDifferent ? 0.35 : 0; // 35% boost for cross-language matches\r\n\r\n        // First calculate base similarity score\r\n        let baseScore;\r\n        if (rawSimilarity > 0.96) {  // Nearly identical\r\n            baseScore = 90 + (rawSimilarity - 0.96) * 250;  // Maps 0.96-1.0 to 90-100\r\n        } else if (rawSimilarity > 0.92) {  // Very similar\r\n            baseScore = 70 + (rawSimilarity - 0.92) * 500;  // Maps 0.92-0.96 to 70-90\r\n        } else if (rawSimilarity > 0.85) {  // Moderately similar\r\n            baseScore = 40 + (rawSimilarity - 0.85) * 428.57;  // Maps 0.85-0.92 to 40-70\r\n        } else {  // Less similar\r\n            baseScore = rawSimilarity * 47.06;  // Maps 0-0.85 to 0-40\r\n        }\r\n\r\n        // Apply language boost and additional scaling for cross-language matches\r\n        let finalScore;\r\n        if (isLanguageDifferent && rawSimilarity > 0.8) {\r\n            // For high-similarity cross-language matches, apply a more aggressive boost\r\n            finalScore = baseScore * (1 + languageBoost) * 1.2;\r\n        } else {\r\n            finalScore = baseScore * (1 + languageBoost);\r\n        }\r\n\r\n        // Ensure final score doesn't exceed 100\r\n        finalScore = Math.min(100, finalScore);\r\n\r\n        console.log('Similarity calculation:', {\r\n            rawSimilarity,\r\n            normalizedSimilarity,\r\n            isLanguageDifferent,\r\n            languageBoost,\r\n            baseScore,\r\n            finalScore\r\n        });\r\n\r\n        return Math.round(Math.min(finalScore, 100) * 10) / 10;\r\n    } catch (error) {\r\n        console.error('Error in calculateCourseSimilarity:', error);\r\n        return 0;\r\n    }\r\n};\r\n\r\n// Find similar courses from a list\r\nexport const findSimilarCourses = async (newCourseEmbedding, storedCourses) => {\r\n    console.log(`Processing ${storedCourses.length} courses for similarity`);\r\n\r\n    try {\r\n        // Log the first few stored courses to verify data\r\n        console.log('Sample of stored courses:',\r\n            storedCourses.slice(0, 3).map(c => ({\r\n                kurskode: c.kurskode,\r\n                kursnavn: c.kursnavn,\r\n                hasEmbedding: Boolean(c.embedding),\r\n                embeddingLength: c.embedding ? c.embedding.length : 0,\r\n                language: c.undv_språk || 'nb'  // Default to Norwegian if not specified\r\n            }))\r\n        );\r\n\r\n        const similarities = storedCourses\r\n            .map(course => {\r\n                if (!course.embedding || !Array.isArray(course.embedding)) {\r\n                    console.log(`Missing or invalid embedding for course: ${course.kurskode}`);\r\n                    return null;\r\n                }\r\n\r\n                console.log(`\\nProcessing course: ${course.kurskode} - ${course.kursnavn}`);\r\n                console.log('Course language:', course.undv_språk || 'nb');\r\n\r\n                // Determine course language\r\n                const courseLanguage = course.undv_språk || 'nb';  // Default to Norwegian\r\n                const targetLanguage = course.kurskode?.startsWith('EXC') ? 'en' : 'nb';  // Assume EXC courses are in English\r\n\r\n                // Calculate similarity with language information\r\n                const similarity = calculateCourseSimilarity(\r\n                    newCourseEmbedding,\r\n                    course.embedding,\r\n                    targetLanguage,\r\n                    courseLanguage\r\n                );\r\n\r\n                // Log similarity with language information\r\n                console.log('Similarity calculation result:', {\r\n                    kurskode: course.kurskode,\r\n                    kursnavn: course.kursnavn,\r\n                    targetLanguage,\r\n                    courseLanguage,\r\n                    similarity\r\n                });\r\n\r\n                return {\r\n                    ...course,\r\n                    similarity\r\n                };\r\n            })\r\n            .filter(course => course !== null)\r\n            .filter(course => {\r\n                const passed = course.similarity >= 40;\r\n                if (!passed) {\r\n                    console.log(`Course ${course.kurskode} filtered out with similarity ${course.similarity}%`);\r\n                }\r\n                return passed;\r\n            })\r\n            .sort((a, b) => b.similarity - a.similarity);\r\n\r\n        // Log similarity distribution\r\n        const allSimilarities = similarities.map(c => c.similarity).sort((a, b) => b - a);\r\n        console.log('\\nSimilarity distribution:', {\r\n            max: Math.max(...allSimilarities),\r\n            min: Math.min(...allSimilarities),\r\n            average: allSimilarities.reduce((a, b) => a + b, 0) / allSimilarities.length,\r\n            count: allSimilarities.length,\r\n            top10: allSimilarities.slice(0, 10)\r\n        });\r\n\r\n        return similarities;\r\n    } catch (error) {\r\n        console.error('Error in findSimilarCourses:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}